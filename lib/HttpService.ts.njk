import FormData from 'form-data';
import urljoin from 'url-join';
import { RequestObject } from '../nodegen/interfaces/RequestObject';
import config from '@/config';
import axios, { AxiosRequestConfig, Method } from 'axios';

export default class HttpService {
  /**
   * Injects the values into a path, eg
   * '/user/:username', {username: 'bob'}
   * would result in
   * '/user/bob'
   */
  static injectParamsToPath (params: any = {}, path: string) {
    Object.keys(params).forEach((param) => {
      path = path.replace(':' + param, params[param]);
    });
    return path;
  }

  /**
   * Make the http request
   */
  async sendRequest (requestObject: RequestObject): Promise<any> {
    requestObject.headers = Object.assign(requestObject.headers || {}, {
      Connection: 'keep-alive',
      'api-key': config.{{ CLIENT_CONFIG_SERVER_NAME }}.apiKey,
    });
    const URL = urljoin(
      config.{{ CLIENT_CONFIG_SERVER_NAME }}.baseUrl,
      HttpService.injectParamsToPath(
        requestObject.params,
        requestObject.path,
      ),
    );

    let fd = new FormData();
    if (requestObject.formData) {
      for (let key in requestObject.formData) {
        fd.append(key, requestObject.formData[key]);
      }
      requestObject.headers['Content-Type'] = 'multipart/form-data';
    }

    const qs = (new URLSearchParams(requestObject.qs || {})).toString();

    const axiosReq: AxiosRequestConfig = {
      headers: requestObject.headers,
      method: requestObject.method as Method,
      data: requestObject.formData ? fd : requestObject.body,
      params: qs && qs.length ? '?' + qs : '',
      url: URL,
      responseType: 'json',
    };

    const { data } = await axios( axiosReq );
    return data;
  }
}
